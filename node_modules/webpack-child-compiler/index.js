var SingleEntryPlugin = require('webpack/lib/SingleEntryPlugin');

 class MyPlugin {
  constructor() {
    // Define compilation name and output name
    this.childCompilerName = 'awesome-plugin-compilation';
    this.outputFileName = 'custom-file.js';
    // To make child compiler work, you have to have a entry in the file system
    this.compilationEntry = './entry-file.js';
  }

  apply(compiler) {
    // Listen to `make` event
    compiler.plugin('make', (compilation, callback) => {
       //(1)make阶段的this是我们的MyPlugin的实例对象
      // Creating child compiler with params
      const childCompiler = compilation.createChildCompiler(this.childCompilerName, {
        filename: this.outputFileName
      });
      // Everyone plugin does this, I don't know why
      childCompiler.context = compiler.context;
      // Add SingleEntryPlugin to make all this work
      childCompiler.apply(new SingleEntryPlugin(compiler.context, this.compilationEntry, this.outputFileName));

      // Needed for HMR. Even if your plugin don't support HMR,
      // this code seems to be always needed just in case to prevent possible errors
      childCompiler.plugin('compilation', (compilation) => {
        if (compilation.cache) {
          if (!compilation.cache[this.childCompilerName]) {
            compilation.cache[this.childCompilerName] = {};
          }
          compilation.cache = compilation.cache[this.childCompilerName];
        }
      });

      // Run child compilation
      childCompiler.runAsChild((err, entries, childCompilation) => {
        callback(err);
      });
    });

  compiler.plugin('emit', function(compilation, callback) {
      // Get our output asset
      const asset = compilation.assets[this.outputFileName];
      // Delete delete our asset from output
      delete compilation.assets[this.outputFileName];

      // Collect all output assets
      const assets = Object.keys(compilation.assets);

      // Combine collected assets and child compilation output into new source.
      // Note: `globalAssets` is global variable
      // let source = `
      //   var globalAssets = ${ JSON.stringify(assets) }
      //   ${ asset.source() }
      // `;

      // Add out asset back to the output
      compilation.assets[this.outputFileName] = {
        source() {
          return source;
        },
        size() {
          return Buffer.byteLength(source, 'utf8');
        }
      };
    });
  }
}

module.exports=MyPlugin;